# val: value, data of the node
# next: reference or pointer to the next node
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
class MyLinkedList:
    def __init__(self):
        self.size = 0 
        self.head = ListNode(0)
    # The function is traverse through the linked list to get the value of the given index
    # Time complexity would be O(N)
    def get(self, index: int) -> int:
        if index < 0 or index >= self.size:
            return -1
        current_node = self.head
        for _ in range(index + 1):
            current_node = current_node.next
        return current_node.val
        
    # The method addAtIndex(0, val) insert directly at the beginning of the list
    #Time complexity is O(1)
    def addAtHead(self, val: int) -> None:
        self.addAtIndex(0, val)
    # The method call addAtTail insert directly at the end of the list
    # Time complexity is O(N) because it needs to traverse all the list
    def addAtTail(self, val: int) -> None:
        self.addAtIndex(self.size, val)

    def addAtIndex(self, index: int, val: int) -> None:
        if index > self.size:
            return
        # Index is negative, treat as adding at the head
        if index < 0:
            index = 0
        
        # Increase the size of the list
        self.size += 1
        
        # Traverse to the node before the insertion point
        prev_node = self.head
        for _ in range(index):
            prev_node = prev_node.next
        
        # Insert the new node
        new_node = ListNode(val)
        new_node.next = prev_node.next
        prev_node.next = new_node
        

    def deleteAtIndex(self, index: int) -> None:
        if index < 0 or index >= self.size:
            return
        self.size -= 1
        prev_node = self.head
        for _ in range(index):
            prev_node = prev_node.next
        prev_node.next = prev_node.next.next


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)