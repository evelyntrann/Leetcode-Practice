# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque
class Solution:
    def maxLevelSum(self, root: Optional[TreeNode]) -> int:
        max_sum = float('-inf')
        max_level = 0 
        current_level = 0 

        queue = deque()
        queue.append(root)
        # 
        while queue:
            current_level += 1
            sum_at_current_level = 0 
        # traverse all the nodes at the current level and add to sum at current level
            for _ in range(len(queue)):
                node = queue.popleft()
                sum_at_current_level += node.val
        # next steps ensure that all the nodes in next level are append into the deque
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            if max_sum < sum_at_current_level:
                max_sum, max_level = sum_at_current_level, current_level
        return max_level